{"version":3,"sources":["../../src/commands/init.ts"],"sourcesContent":["import { Command, Flags, ux } from '@oclif/core';\r\nimport fs from 'fs-extra';\r\nimport path from 'path';\r\nimport inquirer from 'inquirer';\r\nimport kleur from 'kleur';\r\nimport { execSync } from 'child_process';\r\n\r\nexport default class Init extends Command {\r\n    static description = 'Initialize a new @aurora-mp project from a platform template. (WIP)';\r\n\r\n    static flags = {\r\n        template: Flags.string({\r\n            char: 't',\r\n            description: 'Which platform template to use',\r\n            options: ['altv', 'ragemp'] as const,\r\n            default: 'ragemp',\r\n        }),\r\n    };\r\n\r\n    public async run(): Promise<void> {\r\n        const { flags } = await this.parse(Init);\r\n        const { template } = flags;\r\n        const templatesDir = path.join(__dirname, '..', '..', 'templates');\r\n\r\n        // Prompt for project name\r\n        const { projectName } = await inquirer.prompt<{ projectName: string }>([\r\n            {\r\n                type: 'input',\r\n                name: 'projectName',\r\n                message: 'Project name:',\r\n                default: `my-${template}-app`,\r\n                validate: (i) => (i.trim().length > 0 ? true : 'Name cannot be empty'),\r\n            },\r\n        ]);\r\n\r\n        // Prompt for destination directory\r\n        const { destination } = await inquirer.prompt<{ destination: string }>([\r\n            {\r\n                type: 'input',\r\n                name: 'destination',\r\n                message: 'Destination directory:',\r\n                default: projectName,\r\n                validate: (i) => (i.trim().length > 0 ? true : 'Directory cannot be empty'),\r\n            },\r\n        ]);\r\n\r\n        // Prompt for package manager\r\n        const { packageManager } = await inquirer.prompt<{ packageManager: 'npm' | 'yarn' | 'pnpm' }>([\r\n            {\r\n                type: 'list',\r\n                name: 'packageManager',\r\n                message: 'Which package manager would you like to use?',\r\n                choices: ['npm', 'yarn', 'pnpm'],\r\n                default: 'npm',\r\n            },\r\n        ]);\r\n\r\n        // Confirm creation\r\n        this.log();\r\n        const { confirm } = await inquirer.prompt<{ confirm: boolean }>([\r\n            {\r\n                type: 'confirm',\r\n                name: 'confirm',\r\n                message: `Create project \"${projectName}\" in \"${destination}\" using ${packageManager}?`,\r\n                default: true,\r\n            },\r\n        ]);\r\n\r\n        if (!confirm) {\r\n            this.log(kleur.yellow('Project creation aborted.'));\r\n            return;\r\n        }\r\n\r\n        // Copy template\r\n        const source = path.join(templatesDir, template);\r\n        const target = path.resolve(process.cwd(), destination);\r\n        if (!fs.existsSync(source)) {\r\n            this.error(`Template \"${template}\" not found at ${source}`);\r\n        }\r\n        ux.action.start(`Generating project in ${target}`);\r\n        await fs.copy(source, target, { overwrite: false, errorOnExist: true });\r\n        ux.action.stop();\r\n        this.log(kleur.green(`\\nâœ” Project \"${projectName}\" created at ${target}\\n`));\r\n\r\n        // Update package.json name & workspaces configuration\r\n        const pkgPath = path.join(target, 'package.json');\r\n        const pkg = await fs.readJson(pkgPath);\r\n        pkg.name = projectName;\r\n\r\n        if (packageManager === 'pnpm') {\r\n            // write pnpm-workspace.yaml\r\n            const workspaceYaml = `packages:\\n  - 'packages/*'\\n`;\r\n            await fs.writeFile(path.join(target, 'pnpm-workspace.yaml'), workspaceYaml);\r\n            // remove any workspaces field from package.json\r\n            delete pkg.workspaces;\r\n        } else {\r\n            // for npm or yarn, use workspaces field in package.json\r\n            pkg.workspaces = ['packages/*'];\r\n            // remove pnpm-workspace.yaml if it exists\r\n            await fs.remove(path.join(target, 'pnpm-workspace.yaml'));\r\n        }\r\n\r\n        await fs.writeJson(pkgPath, pkg, { spaces: 2 });\r\n\r\n        // Offer to install dependencies\r\n        const { installDeps } = await inquirer.prompt<{ installDeps: boolean }>([\r\n            {\r\n                type: 'confirm',\r\n                name: 'installDeps',\r\n                message: 'Install dependencies now?',\r\n                default: false,\r\n            },\r\n        ]);\r\n\r\n        if (installDeps) {\r\n            this.log(`\\nInstalling dependencies with ${packageManager}...`);\r\n            try {\r\n                execSync(`${packageManager} install`, { cwd: target, stdio: 'inherit' });\r\n                this.log(kleur.green('\\nDependencies installed.\\n'));\r\n            } catch {\r\n                this.log(kleur.red('\\nInstallation failed. Please run manually inside the project.\\n'));\r\n            }\r\n        }\r\n\r\n        // Final instructions\r\n        this.log(`Next steps: \\n\\n${kleur.cyan(`cd ${destination}`)}`);\r\n\r\n        if (installDeps) {\r\n            this.log(`\\n${kleur.cyan(`${packageManager} run dev`)}`);\r\n        } else {\r\n            this.log(`\\n${kleur.cyan(`${packageManager} install`)}`);\r\n            this.log(`${kleur.cyan(`${packageManager} run dev`)}`);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","names":["path","inquirer","kleur","fs"]}